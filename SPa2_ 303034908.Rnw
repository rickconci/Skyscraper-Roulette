% Tell Rstudio this is a knitr document
% !Rnw weave = knitr
\documentclass[12pt]{article}
\usepackage{mathpazo}
\usepackage{hyperref,url}
\usepackage[a4paper,margin=1.5cm]{geometry}


\setlength{\textfloatsep}{6pt plus 1.0pt minus 2.0pt}
\setlength{\floatsep}{6pt plus 1.0pt minus 2.0pt}
\setlength{\dblfloatsep}{6pt plus 1.0pt minus 2.0pt}
\setlength{\dbltextfloatsep}{6pt plus 1.0pt minus 2.0pt}
\setlength{\dblfloatsep}{6pt plus 1.0pt minus 2.0pt}

\newcommand{\Slang}{\texttt{S} }
\newcommand{\R}{\texttt{R} }
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
  \newcommand{\Robject}[1]{{\texttt{#1}}}
    \newcommand{\Rpackage}[1]{{\mbox{\normalfont\textsf{#1}}}}
      
      \usepackage{xcolor}
      \definecolor{Red}{rgb}{0.7,0,0}
      \definecolor{Blue}{rgb}{0,0,0.8}
      
      \usepackage{hyperref}
      \hypersetup{%
        pdfusetitle,
        bookmarks = {true},
        bookmarksnumbered = {true},
        bookmarksopen = {true},
        bookmarksopenlevel = 2,
        unicode = {true},
        breaklinks = {false},
        hyperindex = {true},
        colorlinks = {true},
        linktocpage = {true},
        plainpages = {false},
        linkcolor = {Blue},
        citecolor = {Blue},
        urlcolor = {Red},
        pdfstartview = {Fit},
        pdfpagemode = {UseOutlines},
        pdfview = {XYZ null null null}
      }
      
      \begin{document}

      \title{Scientific Programming assignment 2}
      \author{303034908}
      
      \date{\today}
      \maketitle
      
      <<setup, eval=TRUE, include=FALSE>>=
      require(knitr)
      require(xtable)
      opts_chunk$set(cache=FALSE)      # $ (dollar needed by Emacs.)
      @ 

      \section{Skyscarper [10 marks]}
      
      The function \texttt{skyplot} was created by combining four functions. \texttt{edges.to.coord},
      \texttt{plot.edges}, \texttt{soln.to.coord}, and \texttt{plot.solution}. These four functions
      create the coordinates to then plot using the \texttt{text()} function onto the existing plot. 
      
      
      <<coordinates, eval=TRUE, include=FALSE>>=
           
      edges.to.coord <- function(edges){
        ax.max <- length(edges)/4
        coordinates <- matrix(0, nrow=3, ncol=4*ax.max)
        x.seq <- seq(from=0.5, to=(ax.max-0.5), by=1)
        coordinates[1,] <- c(x.seq, rev(x.seq), rev(x.seq), x.seq)
        coordinates[2,] <- rep(c(3,4,1,2), each=ax.max)
        coordinates[3,] <- edges
        return(coordinates)
      }
      
      
      plot.edges <- function(coordinates){
        for (n in 1:(dim(coordinates)[2])){
          if (isTRUE(all.equal(coordinates[3,n], 0 ))){
            mtext(text =as.character(coordinates[3,n]), side =coordinates[2,n], 
                  at= coordinates[1,n], cex = 1.2, col="white",las=1, line=0.5)
          }else #if (!isTRUE(all.equal(coordinates[3,n], 0 )))
            mtext(text =as.character(coordinates[3,n]), side =coordinates[2,n], 
                  at= coordinates[1,n], cex = 1.2, col="black", las=1, line=0.5)
        }
      }
      
      
      soln.to.coord <- function(solutions){
        ax.max <- sqrt(length(solutions))
        coordinates <- matrix(0, nrow=3, ncol=ax.max^2)
        coordinates[1,] <- rep(seq(from= 0.5, to= ax.max-0.5, by=1), times=ax.max)
        coordinates[2,] <- rep(seq(from=ax.max-0.5, to=0.5, by=-1), each=ax.max)
        coordinates[3,] <- solutions
        coordinates
      }
      
      
      plot.solutions <- function(coordinates){
        for (n in 1:dim(coordinates)[2]){
          if (isTRUE(all.equal(coordinates[3,n], 0 ))){
            text(x= coordinates[1,n], y=coordinates[2,n], label=coordinates[3,n],
                 col='white')
          }else {
            text(x= coordinates[1,n], y=coordinates[2,n], label=coordinates[3,n], 
                 col='black', cex=2)
          }
        }
      }

      @
      
      
      <<plotskyplot, eval=TRUE, include=TRUE, out.width='.6\\linewidth', fig.align='center'>>=
      
      skyplot <- function(edges, soln, ...){
        ## EDGES is a vector of length 4N containing the numbers clockwise
        ## around the grid, starting in the top left corner. SOLN is a
        ## vector of length N^2, storing on a row-by-row basis, starting in
        ## top-left corner. Any elements containing 0 are meant to indiciate blank.
        ## N could be between 4 and 9.
        axmax <- (length(edges)/4) #length of a side 
        par(pty="s") #set aspect ratio as square 
        plot(1, 1,  pch='.', xaxt='n', yaxt='n', xlab="", ylab="", 
             xlim=c(0.17,(axmax-0.17)), ylim=c(0.17,(axmax-0.17))) 
        title(... , line=2, cex.main = 2)#set the xlim and y lim to contact with the 
        #vertical lines at 0 and axmax creating a slightly bolder outside 
        abline(v=c(0:axmax), h=c(0:axmax)) #add horizonal and vertical lines to plot
        edges.coord <- edges.to.coord(edges) #create coordinates to plot edges numbers
        plot.edges(edges.coord) # plot edges numbers : black if non-0, white if 0. 
        soln.coord <- soln.to.coord(soln)
        plot.solutions(soln.coord)
      }


      
      par(mfrow=c(1,2),mar=c(1,3,1,3))
      skyplot( 1:20, 1:25, main="A")
      skyplot( c(2,0,0,0,2, 0,0,0,2,0, 0,0,3,4,0, 0,1,0,2,0), 
               c(0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,5, 5,0,0,0,4, 0,0,0,0,0), main="B")
      
      @ 
      
      Solving the skyplot can be attempted by brute force. Firstly, all possible skyplot solutions 
      are created. Then each one is tested for correctness. 
      
      The possible solution is correct if there are no duplicated numbers in each row/column, and 
      if the edges created by the possible solution match with the non-zero values of the edge 
      values given. 
      
      The first check was implemented with the \texttt{check.duplicates} function, that took the 
      sum of duplicated values of each row and column, and if the sum was 0, returned 
      \texttt{TRUE}. 
      
      The second method of checking required three functions, two to create the edges numbers for a 
      given solution and the third to check the match with the edge numbers of the correct solutions.
      As hinted by the names, \texttt{bigger.than.first} is a function that returns the number of 
      "skyscrapers" seen from the beginning of the vector. \texttt{create.edge.numbers} uses 
      \texttt{bigger.than.first} to recreate a 4N sized vector of edges which can then be tested and 
      matched against the non-zeros values of the original vector. 
      A correct match returns \texttt{TRUE}.
      
      
      <<checkduplicates, eval=TRUE, include=FALSE>>=
      #function1
      #given an n sided matrix, check that the numbers in a given row/column do not repeat
      #if not -> keep
      #if does -> remove
      
      check.duplicates <- function(solution.mat){
        check.row <- apply(solution.mat, 1, function(v)duplicated(v))
        check.col <- apply(solution.mat, 2, function(v)duplicated(v))
        if( isTRUE(all.equal(sum(check.row), 0)) & isTRUE(all.equal(sum(check.col), 0))) {
          return(TRUE)
        }else{
          return (FALSE)
        }
      }
      
      @
      
      
      <<checkedges, eval=TRUE, include=FALSE >>=
      #function2
      #the number of tiles bigger than the first one +1 must match the number 
      #at the edge of the square
      #if does -> keep
      #if not -> remove
      
      
      bigger.than.first <- function( num.seq){
        max.elem.index <- sort(num.seq, index.return=TRUE, decreasing=TRUE)
        shorter.seq <- num.seq[1:(max.elem.index$ix[1])] 
        ordered.sequence <- rank(-shorter.seq)
        first.elem.ordered <- ordered.sequence[1]
        return( sum(ordered.sequence < first.elem.ordered) + 1 )
      }

      create.edge.numbers <- function(solution.mat){
        edge.length <- sqrt(length(solution.mat))
        evalued.edges <- rep(0, (4*edge.length))
        for (ii in 1:length(evalued.edges)){
          if (1 <= ii & ii <= edge.length){
            evalued.edges[ii] <- bigger.than.first(solution.mat[,ii])
          }else if ((edge.length +1) <= ii & ii <=(2*edge.length)){
            evalued.edges[ii] <- bigger.than.first(rev(solution.mat[(ii- edge.length),]))
          } else if (2*edge.length+1 <= ii & ii <= 3*edge.length ){
            evalued.edges[ii] <- bigger.than.first(rev(solution.mat[, ((3*edge.length+1)-ii)]))
          } else if(3*edge.length+1 <= ii & ii <= 4*edge.length){
            evalued.edges[ii] <- bigger.than.first(solution.mat[((4*edge.length+1)-ii), ])
          }
        }
        return(evalued.edges)
      }
      
      check.edges <- function(solution.mat, edges){
        evalued.edges <- create.edge.numbers(solution.mat)
        if (all.equal(evalued.edges[edges>0], edges[edges>0]) == TRUE){
          return( TRUE)
        }
        else{
          return(FALSE)
        }
      }

      
      
      @
      
      
      To create the possible solution matrices, the \texttt{permutation} and the 
      \texttt{combn} functions are both used. As an example, \texttt{permutation(4)} returns
      matrix A with 4 columns and 24 rows. The aim is to select 4 rows from matrix A to create
      a possible solution. To index over the rows of matrix A, \texttt{combn(24,4)} is used to 
      create a 4x10626 matrix B with all possible row combinations of the 4 from the 24 rows. 
      This combination does not take into account the order. For example, its last entry is:
      [21, 22, 23, 24]. Therefore, a further a further  \texttt{permutation(4)} is run to index
      over the columns of matrix B, thus giving all possible column orders for matrix B, and, as
      matrix B is used to index over the rows of matrix A, all possible solutions.
    
      
      <<permutation, eval=TRUE, include=FALSE>>=
          
      ## Taken from: http://stackoverflow.com/questions/11095992
      permutations <- function(n){
        if(n==1){
          return(matrix(1))
        } else {
          sp <- permutations(n-1)
          p <- nrow(sp)
          A <- matrix(nrow=n*p,ncol=n)
          for(i in 1:n){
            A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
          }
          return(A)
        }
      }
      
      @
      
      
      <<solveskyplot, eval=TRUE, include=TRUE>>=
      #function3
      #create all permutations and call functions 1 and 2 to test 
      #return list of all possible solutions
      
      check.solutions <- function(soln.mat, edges){
        ### given a possible solution matrix and the correct vector of edges
        ### check if the solution matrix passes both the row/col duplicates test
        ### and the edges matching test 
        if (check.duplicates(soln.mat) == TRUE &&
            check.edges(soln.mat, edges) == TRUE){
          return(TRUE)
        }else{
          return( FALSE)
        }
      }
      
      find.final.solutions <- function(edges){
        ### given the EDGES as vector, find all the possible skyplot solutions
        ### Output as list of matrices 
        all.permutations <- permutations(4)
        possible.row.index <- combn(dim(all.permutations)[1],
                                    dim(all.permutations)[2])
        possible.col.index <- permutations(4)
        final.soln <- vector("list", 1)
        n<-1
        for (ii in 1:(dim(possible.row.index)[2])){
          for (jj in 1:dim(possible.col.index)[1]){
            poss.soln <- all.permutations[c(possible.row.index
                                            [c(possible.col.index[jj,]),ii]), ]
            if (check.solutions(poss.soln, edges)){
              #print(poss.soln)
              final.soln[[n]] <-poss.soln
              n <- n+1
            }
          }
        }
        return(final.soln)
      }
      
      @
     
     The possible solutions are then tested, and if positive, returned as a list of matrices. 
     The figure below shows all the correct solutions for problem A and B. 
     
     <<plotsolutions, eval=TRUE, include=TRUE, out.width='.4\\linewidth', fig.align='center'>>=
      
      e1 = scan(comment.char="#", quiet=T, 
                "https://raw.githubusercontent.com/sje30/rpc2018/master/a2/e1.dat")
      final.solutions.A <- find.final.solutions(e1)
      #convert solutions from matrices to vectors 
      final.solutions.A <- lapply(final.solutions.A, function(x) as.vector(t(x)))
      if (length(final.solutions.A) == 1 ){
        par(mfrow=c(1,1))
      }else {
        par(mfrow=c(ceiling(length(final.solutions.A)/2), 2), mar=c(1,2,1,2))
      }
      for (num in 1:length(final.solutions.A)){
        skyplot(e1, final.solutions.A[[num]], main=paste("A", num))
      }
      
      e2 = c(3,0,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,2)
      final.solutions.B <- find.final.solutions(e2)
      final.solutions.B <- lapply(final.solutions.B, function(x) as.vector(t(x)))
      #plot the solutions
      par(mfrow=c(ceiling(length(final.solutions.A)/2), 2), mar=c(1,2,1,2))
      for (num in 1:length(final.solutions.B)){
        skyplot(e2, final.solutions.B[[num]], main=paste("B", num))
      }
      
      @
     
        
     \section{Roulette}
     
     \subsection{Simulation}
     
     For each game a function (with no inputs) that plays the game once
     and returns a vector of length two consisting of the amount won/lost and how
     many bets were made was written. The functions can be seen below. 

    <<roulettefunctions, eval=TRUE, include=TRUE>>=
    betting.on.red <- function(){
      wallet <- 1
      num.bets <- 0
      final.wallet <- 0
      bet.money <- 1
      while (num.bets < 1) { 
        num.bets <- num.bets +1
        #result <- as.integer(runif(1, min=0, max=36))
        result <- sample(0:36, 1, replace=TRUE)
        if (1 <= result & result <= 18){
          wallet <- wallet + bet.money 
        }else{
          wallet <- wallet - bet.money
        }
      }
      final.wallet <- wallet -1
      return(c(final.wallet,num.bets))
    }
    
    
    betting.on.number <- function(){
      wallet <- 1
      num.bets <- 0
      bet.money <- 1
      while (num.bets < 1){ 
        num.bets <- num.bets +1
        #chosen.number <- as.integer(runif(1, min=0, max=36))
        chosen.number <- sample(0:36, 1, replace=TRUE)
        #result <- as.integer(runif(1, min=0, max=36))
        result <- sample(0:36, 1, replace=TRUE)
        if (all.equal(chosen.number,result) == TRUE){
          wallet <- wallet + 35
        }else {
          wallet <- wallet - bet.money
        }
      }
      final.wallet <- wallet -1
      return(c(final.wallet, num.bets))
    }
    
    
    martingale.system <- function(){
      wallet <- 1
      bet.money <- 1
      num.bets <- 0
      final.wallet <- 0 
      while (wallet < 10 & bet.money <= 100){
        num.bets <- num.bets + 1
        #result <- as.integer(runif(1, min=0, max=36))
        result <- sample(0:36, 1, replace=TRUE)
        if (1 <= result & result <= 18 ){
          wallet <- wallet + bet.money
          bet.money <- 1
        }else {
          wallet <- wallet - bet.money
          bet.money <- bet.money*2
        }
      }
      final.wallet <- wallet - 1
      return(c(final.wallet, num.bets))
    }
    
    
    D.labouchere.system <- function(){
      wallet <- 1
      numbers <- c(1,2,3,4)
      bet.money <- sum(head(numbers, n=1), tail(numbers,n=1))
      num.bets <- 0
    
      while (length(numbers) >= 1 & bet.money <= 100 ){
        num.bets <- num.bets + 1
        if (length(numbers) >= 2) {
          bet.money <- sum(head(numbers, n=1), tail(numbers,n=1))
          #result <- as.integer(runif(1, min=0, max=36))
          result <- sample(0:36, 1, replace=TRUE)
          if (1 <= result & result <= 18){
            wallet <- wallet + bet.money
            numbers <- numbers[c(-1, -length(numbers))]
          }else{
            wallet <- wallet - bet.money
            numbers <- c(numbers, bet.money)
          }
        }else if (length(numbers) == 1){
          bet.money <- numbers
          result <- runif(1, min=0, max=36)
          if (1 <= result & result <= 18){
            wallet <- wallet + bet.money
            numbers <- NULL
          }else{
            wallet <- wallet - bet.money
            numbers <- c(numbers, bet.money) 
          }
        }
      }
      final.wallet <- wallet - 1
      return(c(final.wallet, num.bets))
    }
      
      
      
    @

    The function \texttt{a.night.to.remember} was written to iterate over each of the 
    above games 100,000 times. The results were analysed using four more functions,
    \texttt{expected.winnings}, \texttt{proportion.won}, \texttt{expectd.play.time} to
    estimate the expected winnings per game, the proportion of games won and the expected 
    playing time and \texttt{analyse.night} to combine these three into one.
    
    <<playgames, eval=TRUE, include=TRUE>>=
    
    a.night.to.remember <- function(itn=100000, type){
      ### iterate by itn over each type of game 
      switch(type,
             play.on.red = replicate(itn, betting.on.red()),
             play.on.number = replicate(itn, betting.on.number()),
             play.martingale = replicate(itn, martingale.system()),
             play.labouchere = replicate(itn, D.labouchere.system())
      )
    }
        
    @
    
    <<eval=TRUE, include=FALSE>>=
      
    night.on.red <- a.night.to.remember(itn=100000,type ="play.on.red")
    night.on.number <- a.night.to.remember(itn=100000,type ="play.on.number")
    night.on.martingale <- a.night.to.remember(itn=100000,type ="play.martingale")
    night.on.labouchere <-  a.night.to.remember(itn=100000,type ="play.labouchere")
    
    @
    
    <<analysenight, eval=TRUE, include=TRUE>>=
    
    expected.winnings <- function(night.log){
      final.wallet <-  night.log[1, ]
      mean.final.wallet <- mean(final.wallet)
      sd.final.wallet <- sd(final.wallet)
      return(c(mean.final.wallet, sd.final.wallet))
    }
    
    proportion.won <- function(night.log){
      mean.prop.won <- mean(night.log[1,]>0)*100
      sd.prop.won <- sd(night.log[1,]>0)
      return(c(mean.prop.won, sd.prop.won))
    }
    
    expected.play.time <- function(night.log){
      games.played <- night.log[2,]
      mean.games.played <- mean(games.played)
      sd.games.played <- sd(games.played)
      return(c(mean.games.played, sd.games.played))
    }

    analyse.night <- function(night.log){
      exp.winnings <- expected.winnings(night.log)
      prop.games.won <- proportion.won(night.log)
      exp.playing.time <- expected.play.time(night.log)
      return(c(exp.winnings, prop.games.won,exp.playing.time))
    }
  

    @
    
    <<eval=TRUE, include=FALSE>>=
    red.analysis <- analyse.night(night.on.red)
    number.analysis <- analyse.night(night.on.number)
    martingale.analysis <- analyse.night(night.on.martingale)
    labouchere.analysis <- analyse.night(night.on.labouchere)
    
    @
    
    \subsection{Verification}
     
     The exact answers for expected winnings and proportion of games won can be 
     calculated for game A (betting on red) and game B (betting on a number) according
     to the following intuitions:
     
     \textit{Expected winnings = P(win) $\times$ amount won + P(loss) $\times$ amount lost}
     
     
     \textit{Proportion won = P(win) $\times$ 100 }
     
     For game A this becomes:
     
      \begin{equation}
        \frac{18}{37} \times 1 - \frac{19}{37} \times 1 = -\frac{1}{37}
      \end{equation}
    
     
      \begin{equation}
          \frac{18}{37} \times 100 \sim 48.65 \%
      \end{equation}
      
    
    And for game B this becomes:
    
      \begin{equation}
          \frac{1}{37} \times 35 - \frac{36}{37} \times 1 = -\frac{1}{37}
      \end{equation}
      
     
      \begin{equation}
          \frac{1}{37} \times 100 \sim 2.702\%
      \end{equation}
      
      
      
      The percentage error in the estimates are shown in table \ref{tab:verification1}. 
      <<percentageerror, eval=TRUE, include=FALSE>>=
      
      #percentage error in estimated winnings  
      exp.winnings.error.red <- abs((-1/37-red.analysis[1])/(-1/37)) * 100
      exp.winnnings.error.numbers <- abs((-1/37-number.analysis[1])/(-1/37)) * 100
      
      #percentage error in estimated proportion won 
      exp.prop.error.red <- abs(((18/37*100)-red.analysis[3]) /(18/37*100))
      exp.prop.error.numbers <- abs(((1/37*100)-number.analysis[3]) / (1/37*100))
      
      df <- data.frame(games= c("A", "B"), 
                       Percentage.error.expected.winnings = 
                         c(exp.winnings.error.red, exp.winnnings.error.numbers), 
                       Percentage.error.proportion.won = 
                         c(exp.prop.error.red, exp.prop.error.numbers))
      
      colnames(df) <- c("Games", "% Error expected winnings", "% Error proportion won")
      @
      
      <<results='asis', include= TRUE, eval=TRUE>>=
      x1 <- xtable(df, caption="Verification of games A and B", label="tab:verification1" )
      print(x1, scalebox = 1, include.rownames = FALSE)
      @
      
      
      The maximum amount that can be won and the maximum amount that can be lost can both be calculated 
      exactly for each game. 
      \begin{itemize}
        \item Game A: Betting on red
        \begin{itemize}
          \item Max win: \$2. As a single iteration game, the max won will be $\$1 + \$1$.
          \item Max loss: \$1, the original bet.
        \end{itemize}
        \item Game B: Betting on a number
        \begin{itemize}
          \item Max win: \$36, the \$1 + the \$35 won if the number is matched. 
          \item Max loss: \$1, the original bet.
        \end{itemize}
        \item Game C: Martingale System
        \begin{itemize}
          \item Max win: \$10. If the player always wins, the bet remains at \$1, which is gradually 
          added until the limit of \$10 is reached. 
          \item Max loss: \$127. Consecutive losses leads to doubling of the bet until it reaches \$100. 
          This will occur exactly at $\log_2 100 \sim 6.64$ losses, which however, has to be rounded to 6.
          Moreover, when loosing, the bet is always subtracted from the current amount of money.
          Therefore, the max lost will be $1 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 + 2^6 = 127 $. 
        \end{itemize}
        \item Game D: D. Labouchere System
        \begin{itemize}
          \item Max win: \$10 in this case, or, more generally, the sum of the numbers in the original list.
          A simple proof of this can be found at \url{https://math.stackexchange.com/q/2470522}. 
          \item Max loss: \$4940. A continuous loss from the beginning will lead to the bet size increasing 
          gradually by 1 from its starting point, 5 in this case, until it reaches 100. 
          This gradual loss of money till the limit can be denoted as: $\sum_{n=5}^{99} n = 4940.$
        \end{itemize}
      \end{itemize}
    
      \subsection{Variation}
      
      The simulation experiment of the first section was repeated five times and the maximum and 
      minumum values of the expected winings, proportion of wins and expected play time are shown 
      in table \ref{tab:five.min.max} below.
      
      <<eval=TRUE, include=FALSE>>=
      combine.results <- function(night.analysis){
        night.analysis <- round(night.analysis, digits=4)
        night.analysis.combined <- c(paste(night.analysis[1],",",  night.analysis[2]),
                                     paste(night.analysis[3], ",", night.analysis[4]),
                                     paste(night.analysis[5], "," , night.analysis[6]))
        return(night.analysis.combined)
      }
      
      @
      
      
      <<minmax, eval=TRUE, include = FALSE>>=
 
      red.five.times <- replicate(5, a.night.to.remember(itn=100000, type="play.on.red"))
      number.five.times <- replicate(5, a.night.to.remember(itn=100000, type="play.on.number"))
      martingale.five.times <- replicate(5, a.night.to.remember(itn=100000, type="play.martingale"))
      labouchere.five.times <- replicate(5, a.night.to.remember(itn=100000, type="play.labouchere"))
      
      min.max <- function(five.night.log){
        five.night.results <- matrix(0, nrow=5, ncol=6)
        for (ii in 1:dim(five.night.log)[3]){
          five.night.results[ii,] <- analyse.night(five.night.log[,,ii])
        }
        min.exp.win <- min(five.night.results[,1])
        max.exp.win <- max(five.night.results[,1])
        min.prop.win <- min(five.night.results[,3])
        max.prop.win <- max(five.night.results[,3])
        min.exp.play.time <- min(five.night.results[,5])
        max.exp.play.time <- max(five.night.results[,5])
        
        return(c(min.exp.win, max.exp.win,min.prop.win, max.prop.win,
                 min.exp.play.time,max.exp.play.time))
      }
      
      red.five.min.max <- min.max(red.five.times)
      number.five.min.max <- min.max(number.five.times)
      martingale.five.min.max <- min.max(martingale.five.times)
      labouchere.five.min.max <- min.max(labouchere.five.times)
      
      red.five.min.max.comb <- combine.results(red.five.min.max)
      number.five.min.max.comb <- combine.results(number.five.min.max)
      martingale.five.min.max.comb <-combine.results(martingale.five.min.max)
      labouchere.five.min.max.comb <- combine.results(labouchere.five.min.max)
      
      
      full.five.results <- rbind(red.five.min.max.comb, number.five.min.max.comb, 
                                 martingale.five.min.max.comb, labouchere.five.min.max.comb)
      
      full.five.results <- cbind(c("A", "B", "C", "D"), full.five.results)
      
      full.five.results.df <- data.frame(full.five.results)
      colnames(full.five.results.df) <- c("Games", 
                             "Exp. winnigs min-max", 
                             "Prop. wins min-max",
                             "Exp. playtime min-max")
      
      @
      
      <<results='asis', include=TRUE, eval=TRUE>>=
      
      x2 <- xtable(full.five.results.df, caption="Min and Max across 5x100,000 iterations",
             label="tab:five.min.max")
      print(x2, scalebox = 1, include.rownames = FALSE)
      @
      
      
      Finally, the mean and standard deviation for 100,000 iterations of each game 
      can be measured. These results are shown in table \ref{tab:finaltable}.
      
      <<finaltable, eval=TRUE, include=FALSE>>=
      red.analysis.comb <- combine.results(red.analysis)
      number.analysis.comb <- combine.results(number.analysis)
      martingale.analysis.comb <- combine.results(martingale.analysis)
      labouchere.analysis.comb <- combine.results(labouchere.analysis)
      final.table <- rbind(red.analysis.comb, number.analysis.comb,
                           martingale.analysis.comb, labouchere.analysis.comb)
      
      final.table <- cbind(c("A", "B", "C", "D"), final.table)
      
      final.table.df <- data.frame(final.table)
      colnames(final.table.df) <- c("Games", 
                                    "Winnings mean, std dev", 
                                    "Prop. wins mean, std dev", 
                                    "Play time mean, std dev")
      
      
      @
      
      <<results='asis', eval=TRUE, include=TRUE>>=
      
      x3 <- xtable(final.table.df, caption="Mean and standard deviation for each
             game of 100,000 iterations", label="tab:finaltable" )
      print( x3, scalebox = 1, include.rownames = FALSE )
      
      @
      
      Both the amount won and the expected playing time are most variable 
      in the D. Labouchere system. 
      

\end{document}